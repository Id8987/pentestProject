import datetime

from flask import Flask, request, jsonify,make_response, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from sqlalchemy import Column, ForeignKey, Integer, Table,ARRAY
from sqlalchemy.orm import relationship
from flask_bcrypt import Bcrypt
import nmap
from flask_migrate import Migrate
from flask_cors import CORS
from flask_mail import Mail, Message
import subprocess
import json



#variable qui permet de faire le scan

nm = nmap.PortScanner()

app = Flask (__name__)


app.config["SQLALCHEMY_DATABASE_URI"] = "mysql://root:@localhost/pentest"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
#configuration Flask_Mail
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = '465'
app.config['MAIL_USERNAME'] = 'nbaye156@gmail.com'
app.config['MAIL_PASSWORD'] = '6a3a6pDgSLa4wAx'
mail = Mail(app)


db = SQLAlchemy(app)
ma = Marshmallow(app)
CORS(app)

#creation des tables:

    #cryptage des mot de passe

bcrypt = Bcrypt()
    # permet la mdofication
migrate = Migrate(app, db)

class User(db.Model):

    idUser = db.Column(db.Integer, primary_key = True)
    nomUser = db.Column(db.String(100), nullable = False)
    prenomUser = db.Column(db.String(100), nullable = False)
    pays = db.Column(db.String(100), nullable = False)
    entreprise = db.Column(db.String(100), nullable = False)
    email = db.Column(db.String(255), nullable = False)
    motDePasse = db.Column(db.String(255), nullable = False)
    machines = relationship("Host", back_populates="user")
    def __init__ (self, nomUser, prenomUser, pays, entreprise, email, motDePasse):
        self.nomUser = nomUser
        self.prenomUser = prenomUser
        self.pays = pays
        self.entreprise = entreprise
        self.email = email
        self.motDePasse = motDePasse


class Host(db.Model):
    idHost = db.Column(db.Integer, primary_key = True)
    nomHost = db.Column(db.String(100))
    ipHost = db.Column(db.String(100))
    osHost = db.Column(db.String(100))
    portsHost = db.Column(db.String(100))
    user_id = Column(Integer, ForeignKey("user.idUser"))
    user = relationship("User", back_populates="machines")

    def __init__(self, nomHost, ipHost, osHost, portsHost, user_id):
        self.user_id = user_id
        self.nomHost = nomHost
        self.ipHost = ipHost
        self.osHost = osHost
        self.portsHost = portsHost


class Target(db.Model):
    idTarget = db.Column(db.Integer, primary_key = True)
    nomTarget = db.Column(db.String(100))
    ipTarget = db.Column(db.String(100), nullable = False)
    nomDeDomaine = db.Column(db.String(100), nullable = False)
    def __init__ (self,nomTarget, ipTarget, nomDeDomaine):
        self.nomTarget = nomTarget
        self.ipTarget = ipTarget
        self.nomDeDomaine = nomDeDomaine


class Resultat(db.Model):
    idResultat = db.Column(db.Integer, primary_key = True)
    formatResultat  = db.Column(db.Text())
    dateResultat = db.Column(db.DateTime, default = datetime.datetime.now)

    def __init__(self, formatResultat, dateResultat):
        self.formatResultat = formatResultat
        self.dateResultat = dateResultat


#creation des schema pour la conversion des donnees en JSON:
#------User-----
class UserSchema (ma.Schema):
    class Meta:
        fields = ('idUser', 'nomUser', 'prenomUser', 'pays', 'entreprise', 'email', 'motDePasse')
user_schema = UserSchema()
user_schema = UserSchema(many=True)

#----------Host-----------
class HostSchema (ma.Schema):
    class Meta:
        fields = ('idHost','nomHost', 'ipHost','osHost','portsHost', 'user_id')

#-------Target ----------
class TargetSchema(ma.Schema):
    class Meta:
        fields = ('idTarget', 'nomTarget', 'ipTarget','nomDeDomaine')

#----Resultat -----------
class ResultatSchema(ma.Schema):
    class Meta:
        fields = ('idResultat', 'formatResultat', 'dateResultat')

class RenderResultats(ma.Schema):
    class Meta:
        fields = ('hosts_list', 'nm_all_hosts')
all_host = RenderResultats(many = True)




@app.route('/', methods = ['GET'])
def sayHello():
    
    return {"msg":"hello"}




@app.route("/addUser", methods = ["POST"])
def add_user():
    
    nomUser = request.json['firstName']
    prenomUser = request.json['lastName']
    motDePasse = request.json['password']
    pays = request.json['country']
    entreprise = request.json['entreprise']
    email = request.json['email']

    user = User(nomUser=nomUser, prenomUser=prenomUser, pays=pays, entreprise=entreprise, email=email, motDePasse= bcrypt.generate_password_hash(motDePasse))
    db.session.add(user)
    db.session.commit()
    
    #test du mailling
    msg = Message('Confirmation d\'inscription', sender = 'nbay156@gmail.com', recipients = [email])
    msg.body =  "Merci de votre inscription sur notre site ! Pour confirmer votre adresse e-mail, cliquez sur ce lien : http://localhost:5000/confirm/" + email
    mail.send(msg)
    

    return user_schema.jsonify(user)

@app.route('/confirm/<email>')
def confirm(email):
    # Vérifier que l'adresse e-mail a été confirmée et créer le compte de l'utilisateur
    return "Votre adresse e-mail a été confirmée. Votre compte a été créé avec succès !"

"""
def scan(  # NOQA: CFQ001, C901
        self, hosts="127.0.0.1", ports=None, arguments="-sV", sudo=False, timeout=0
    ):
"""

@app.route('/scan', methods = ['POST', 'GET'])
def scanner():
    if request.method == 'POST':
        target = request.json['target']
        type_scan = request.json['scan_type']
        options = request.json['options']
        print("------------le scan commence-----------")
        nm.scan(hosts=target, arguments= f'{type_scan} '+ f'{options}')
        hosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]
        
        render = '{\n\t"target":' + f"{target}"+ ',\n \t name:"reconnaissance",  \n'
        
        render = render + '\t"hosts": [\n'
        for host in nm.all_hosts():
            render = render + "\t\t{\n"
            print('----------------------------------------------------')
            print('Host : %s (%s)' % (host, nm[host].hostname()))
            render = render+ '\t\t "host":' + f"{host}"+ ',\n\t\t "hostname":' + f"{nm[host].hostname()}"+',\n'
            print('State : %s' % nm[host].state())
            render = render+ '\t\t "state":' + f"{nm[host].state()}"+ ',\n'
            
            render = render + '\t\t"protocols": [\n'
            for proto in nm[host].all_protocols():
                print('----------')
                render = render + "{'\n"
                print('Protocol : %s' % proto)
                render = render+ ' proto:' + f"{proto}"+ ',\n'
                lport = nm[host][proto].keys()
                # lport.sort()
                render = render + '"ports": [\n'
                for port in lport:
                    render = render + "{\n"
                    print ('port : %s\tstate : %s' % (port, nm[host][proto][port]['state']))
                    render = render+ ' "port":' + f"{port}"+ ',\n'
                    render = render+ ' "state":' + f"{nm[host][proto][port]['state']}"+ ',\n'
                    render = render + "},\n"
                render = render + f"],\n"
                    
                render = render + "},\n" #
            render = render + f"\t\t],\n"
            render = render + "\t\t},\n"
        render = render + "\t],\n"
        render = render + "\t},\n"
        return {"result":hosts_list}
    elif request.method == 'GET':
        target = request.json['target']
        type_scan = request.json['scan_type']
        options = request.json['options']
        
        nm.scan(hosts=target, arguments= f'{type_scan} '+ f'{options}')
        hosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]
        
        render = '{\n \t"target":' + f"{target}"+ ',\n \t name:"reconnaissance",  \n'
        
        render = render + '\t"hosts": [\n'
        for host in nm.all_hosts():
            render = render + "\t\t{\n"
            print('----------------------------------------------------')
            print('Host : %s (%s)' % (host, nm[host].hostname()))
            render = render+ '\t\t "host":' + f"{host}"+ ',\n\t\t "hostname":' + f"{nm[host].hostname()}"+',\n'
            print('State : %s' % nm[host].state())
            render = render+ '\t\t "state":' + f"{nm[host].state()}"+ ',\n'
            
            render = render + '\t\t"protocols": [\n'
            for proto in nm[host].all_protocols():
                print('----------')
                render = render + "{'\n"
                print('Protocol : %s' % proto)
                render = render+ ' proto:' + f"{proto}"+ ',\n'
                lport = nm[host][proto].keys()
                # lport.sort()
                render = render + '"ports": [\n'
                for port in lport:
                    render = render + "{\n"
                    print ('port : %s\tstate : %s' % (port, nm[host][proto][port]['state']))
                    render = render+ ' "port":' + f"{port}"+ ',\n'
                    render = render+ ' "state":' + f"{nm[host][proto][port]['state']}"+ ',\n'
                    render = render + "},\n"
                render = render + f"],\n"
                    
                render = render + "},\n" #
            render = render + f"\t\t],\n"
            render = render + "\t\t},\n"
        render = render + "\t],\n"
        render = render + "\t},\n"
        return {"result":render}


@app.route("/getUserValue", methods = ["GET","POST"])
def get_user():
    user_email = request.json['email']
    user = db.session.query(User).filter_by(email = user_email)
    return user_schema.jsonify(user)

    

if __name__ == "__main__":
    app.run(debug=True)

# python -m pip freeze > requirements.txt