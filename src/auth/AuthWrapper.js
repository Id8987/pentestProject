import { createContext, useContext, useEffect, useState } from "react";
import Navbar from "../components/Navbar";
import { RenderRoutes } from "../components/RenderNavigation";



const AuthContext = createContext()
export const AuthData = () => useContext(AuthContext)

export const AuthWrapper = () =>{
    const otherUserData = {
        firstName:"Issakha",
        lastName:"Diouf",
        country:"SEN",
        entreprise:"SONATEL"
    }
   


    const [user, setUser] = useState({ ...otherUserData, email:"", isAuthenticate: false})
    const [verify, setVerify] = useState(false)

    useEffect(()=>{
        if(verify){
            fetch('http://localhost:5000/getUserValue')
            .then(response => response.json())
            .then(data => console.log(data) );
        }
    })
   

    // gerer l'insciption de l'utilisateur
    const login = (userEmail, password) => {
        // fetch('http://localhost:5000/getUserValue', {
        //     method: 'POST',
        //     headers: { 'Content-Type': 'application/json' },
        //     body: JSON.stringify({ email:userEmail})
        // }
        // )
        // .then(response => response.json())
        // .then(data => console.log(data) );
        return new Promise((resolve, reject) => {

            //ici on compare avec les valuers de la base de donnees

            if( userEmail === "user@gmail.com" & password === "password"){
                setUser({...otherUserData,email:userEmail, isAuthenticate:true})
                resolve("success")
            }
            else{
                reject("incorrect password or email ")
            }
        })
    }

    // fonction qui gere la deconnection

    const logout = () =>{
        setUser({...otherUserData,email:"", isAuthenticate:false})
    }

    return(
        <AuthContext.Provider value={{user, login, logout}}>
            <Navbar />
            <RenderRoutes />
        </AuthContext.Provider>
    )
}